"use client"

import { useState } from "react"
import { useParams, Link } from "react-router-dom"
import { useProperty } from "../contexts/PropertyContext"
import { useAuth } from "../contexts/AuthContext"
import { useNotification } from "../contexts/NotificationContext"

export default function PropertyDetails() {
  const { id } = useParams<{ id: string }>()
  const { getProperty, addToFavorites, removeFromFavorites, favorites, submitOffer, scheduleViewing } = useProperty()
  const { user } = useAuth()
  const { addNotification } = useNotification()

  const property = getProperty(id!)

  const [showInquiryModal, setShowInquiryModal] = useState(false)
  const [showOfferModal, setShowOfferModal] = useState(false)
  const [showViewingModal, setShowViewingModal] = useState(false)
  const [inquiryMessage, setInquiryMessage] = useState("")
  const [offerAmount, setOfferAmount] = useState("")
  const [offerMessage, setOfferMessage] = useState("")
  const [viewingDate, setViewingDate] = useState("")
  const [viewingTime, setViewingTime] = useState("")

  if (!property) {
    return (
      <div className="container py-5">
        <div className="text-center">
          <h2>Property Not Found</h2>
          <p className="text-muted">The property you're looking for doesn't exist.</p>
          <Link to="/search" className="btn btn-primary">
            Back to Search
          </Link>
        </div>
      </div>
    )
  }

  const isFavorite = favorites.includes(property.id)
  const isOwner = user && (user.id === property.seller.id || user.id === property.agent.id)

  const toggleFavorite = () => {
    if (!user) return

    if (isFavorite) {
      removeFromFavorites(property.id)
    } else {
      addToFavorites(property.id)
    }
  }

  const handleInquiry = () => {
    if (!user) return

    // Simulate sending inquiry
    addNotification({
      type: "success",
      title: "Inquiry Sent",
      message: `Your inquiry about ${property.title} has been sent to the ${property.agent ? "agent" : "seller"}.`,
    })

    setShowInquiryModal(false)
    setInquiryMessage("")
  }

  const handleOffer = async () => {
    if (!user || !offerAmount) return

    await submitOffer(property.id, {
      buyerId: user.id,
      buyerName: user.name,
      amount: Number.parseInt(offerAmount),
      status: "Pending",
      message: offerMessage,
    })

    addNotification({
      type: "success",
      title: "Offer Submitted",
      message: `Your offer of $${Number.parseInt(offerAmount).toLocaleString()} has been submitted.`,
    })

    setShowOfferModal(false)
    setOfferAmount("")
    setOfferMessage("")
  }

  const handleScheduleViewing = async () => {
    if (!user || !viewingDate || !viewingTime) return

    await scheduleViewing(property.id, {
      userId: user.id,
      userName: user.name,
      date: viewingDate,
      time: viewingTime,
      status: "Scheduled",
    })

    addNotification({
      type: "success",
      title: "Viewing Scheduled",
      message: `Your viewing for ${property.title} has been scheduled for ${viewingDate} at ${viewingTime}.`,
    })

    setShowViewingModal(false)
    setViewingDate("")
    setViewingTime("")
  }

  return (
    <div className="container py-4">
      {/* Breadcrumb */}
      <nav aria-label="breadcrumb" className="mb-4">
        <ol className="breadcrumb">
          <li className="breadcrumb-item">
            <Link to="/">Home</Link>
          </li>
          <li className="breadcrumb-item">
            <Link to="/search">Search</Link>
          </li>
          <li className="breadcrumb-item active">{property.title}</li>
        </ol>
      </nav>

      <div className="row">
        {/* Property Images */}
        <div className="col-lg-8 mb-4">
          <div className="card shadow-sm">
            <img
              src={property.images[0] || "/placeholder.svg"}
              className="card-img-top"
              alt={property.title}
              style={{ height: "400px", objectFit: "cover" }}
            />
            <div className="card-body">
              <div className="d-flex justify-content-between align-items-start mb-3">
                <div>
                  <h1 className="h3 mb-2">{property.title}</h1>
                  <p className="text-muted mb-2">
                    üìç {property.location.address}, {property.location.city}, {property.location.state}{" "}
                    {property.location.zipCode}
                  </p>
                  <div className="d-flex gap-3 mb-3">
                    <span className="badge bg-primary">{property.type}</span>
                    <span className={`badge ${property.status === "For Sale" ? "bg-success" : "bg-info"}`}>
                      {property.status}
                    </span>
                  </div>
                </div>
                <div className="text-end">
                  <h2 className="text-primary mb-2">
                    ${property.price.toLocaleString()}
                    {property.status === "For Rent" && <small className="text-muted">/month</small>}
                  </h2>
                  {user && !isOwner && (
                    <button
                      className={`btn ${isFavorite ? "btn-danger" : "btn-outline-danger"}`}
                      onClick={toggleFavorite}
                    >
                      {isFavorite ? "‚ù§Ô∏è Saved" : "ü§ç Save"}
                    </button>
                  )}
                </div>
              </div>

              {/* Property Details */}
              <div className="row text-center mb-4">
                <div className="col-3">
                  <div className="border rounded p-3">
                    <div className="h4 mb-1">üõèÔ∏è</div>
                    <div className="fw-bold">{property.details.bedrooms}</div>
                    <small className="text-muted">Bedrooms</small>
                  </div>
                </div>
                <div className="col-3">
                  <div className="border rounded p-3">
                    <div className="h4 mb-1">üöø</div>
                    <div className="fw-bold">{property.details.bathrooms}</div>
                    <small className="text-muted">Bathrooms</small>
                  </div>
                </div>
                <div className="col-3">
                  <div className="border rounded p-3">
                    <div className="h4 mb-1">üìê</div>
                    <div className="fw-bold">{property.details.area}</div>
                    <small className="text-muted">Sq Ft</small>
                  </div>
                </div>
                <div className="col-3">
                  <div className="border rounded p-3">
                    <div className="h4 mb-1">üöó</div>
                    <div className="fw-bold">{property.details.parking}</div>
                    <small className="text-muted">Parking</small>
                  </div>
                </div>
              </div>

              {/* Description */}
              <div className="mb-4">
                <h5>Description</h5>
                <p>{property.description}</p>
              </div>

              {/* Amenities */}
              {property.amenities.length > 0 && (
                <div className="mb-4">
                  <h5>Amenities</h5>
                  <div className="row">
                    {property.amenities.map((amenity, index) => (
                      <div key={index} className="col-md-6 mb-2">
                        <span className="badge bg-light text-dark me-2">‚úì</span>
                        {amenity}
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Property Stats */}
              <div className="row text-center border-top pt-3">
                <div className="col-4">
                  <div className="text-muted small">Views</div>
                  <div className="fw-bold">üëÅÔ∏è {property.views}</div>
                </div>
                <div className="col-4">
                  <div className="text-muted small">Inquiries</div>
                  <div className="fw-bold">üí¨ {property.inquiries}</div>
                </div>
                <div className="col-4">
                  <div className="text-muted small">Year Built</div>
                  <div className="fw-bold">üèóÔ∏è {property.details.yearBuilt}</div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Contact & Actions */}
        <div className="col-lg-4">
          {/* Contact Information */}
          <div className="card shadow-sm mb-4">
            <div className="card-header bg-primary text-white">
              <h5 className="card-title mb-0">Contact Information</h5>
            </div>
            <div className="card-body">
              {/* Agent Info */}
              <div className="mb-3">
                <h6 className="fw-bold">Agent</h6>
                <div className="d-flex align-items-center mb-2">
                  <div
                    className="bg-primary text-white rounded-circle d-flex align-items-center justify-content-center me-3"
                    style={{ width: "40px", height: "40px" }}
                  >
                    {property.agent.name.charAt(0)}
                  </div>
                  <div>
                    <div className="fw-bold">{property.agent.name}</div>
                    <small className="text-muted">Real Estate Agent</small>
                  </div>
                </div>
                <div className="small">
                  <div>üìß {property.agent.email}</div>
                  <div>üìû {property.agent.phone}</div>
                </div>
              </div>

              {/* Seller Info */}
              <div className="mb-3">
                <h6 className="fw-bold">Seller</h6>
                <div className="small">
                  <div>üë§ {property.seller.name}</div>
                  <div>üìß {property.seller.email}</div>
                  <div>üìû {property.seller.phone}</div>
                </div>
              </div>
            </div>
          </div>

          {/* Action Buttons */}
          {user && !isOwner && (
            <div className="card shadow-sm mb-4">
              <div className="card-header bg-success text-white">
                <h5 className="card-title mb-0">Interested?</h5>
              </div>
              <div className="card-body d-grid gap-2">
                <button className="btn btn-primary" onClick={() => setShowInquiryModal(true)}>
                  üí¨ Send Inquiry
                </button>

                <button className="btn btn-outline-primary" onClick={() => setShowViewingModal(true)}>
                  üìÖ Schedule Viewing
                </button>

                {property.status === "For Sale" && (
                  <button className="btn btn-success" onClick={() => setShowOfferModal(true)}>
                    üí∞ Make Offer
                  </button>
                )}
              </div>
            </div>
          )}

          {/* Property History */}
          <div className="card shadow-sm">
            <div className="card-header">
              <h5 className="card-title mb-0">Property History</h5>
            </div>
            <div className="card-body">
              <div className="small">
                <div className="mb-2">
                  <strong>Listed:</strong> {new Date(property.createdAt).toLocaleDateString()}
                </div>
                <div className="mb-2">
                  <strong>Last Updated:</strong> {new Date(property.updatedAt).toLocaleDateString()}
                </div>
                <div className="mb-2">
                  <strong>Property ID:</strong> {property.id}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Inquiry Modal */}
      {showInquiryModal && (
        <div className="modal show d-block" style={{ backgroundColor: "rgba(0,0,0,0.5)" }}>
          <div className="modal-dialog">
            <div className="modal-content">
              <div className="modal-header">
                <h5 className="modal-title">Send Inquiry</h5>
                <button type="button" className="btn-close" onClick={() => setShowInquiryModal(false)}></button>
              </div>
              <div className="modal-body">
                <p>Send a message to the agent about this property:</p>
                <textarea
                  className="form-control"
                  rows={4}
                  placeholder="I'm interested in this property. Could you provide more information?"
                  value={inquiryMessage}
                  onChange={(e) => setInquiryMessage(e.target.value)}
                ></textarea>
              </div>
              <div className="modal-footer">
                <button type="button" className="btn btn-secondary" onClick={() => setShowInquiryModal(false)}>
                  Cancel
                </button>
                <button type="button" className="btn btn-primary" onClick={handleInquiry}>
                  Send Inquiry
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Offer Modal */}
      {showOfferModal && (
        <div className="modal show d-block" style={{ backgroundColor: "rgba(0,0,0,0.5)" }}>
          <div className="modal-dialog">
            <div className="modal-content">
              <div className="modal-header">
                <h5 className="modal-title">Make an Offer</h5>
                <button type="button" className="btn-close" onClick={() => setShowOfferModal(false)}></button>
              </div>
              <div className="modal-body">
                <div className="mb-3">
                  <label className="form-label">Offer Amount</label>
                  <div className="input-group">
                    <span className="input-group-text">$</span>
                    <input
                      type="number"
                      className="form-control"
                      placeholder="Enter your offer"
                      value={offerAmount}
                      onChange={(e) => setOfferAmount(e.target.value)}
                    />
                  </div>
                  <small className="text-muted">Listed price: ${property.price.toLocaleString()}</small>
                </div>
                <div className="mb-3">
                  <label className="form-label">Message (Optional)</label>
                  <textarea
                    className="form-control"
                    rows={3}
                    placeholder="Add a message with your offer..."
                    value={offerMessage}
                    onChange={(e) => setOfferMessage(e.target.value)}
                  ></textarea>
                </div>
              </div>
              <div className="modal-footer">
                <button type="button" className="btn btn-secondary" onClick={() => setShowOfferModal(false)}>
                  Cancel
                </button>
                <button type="button" className="btn btn-success" onClick={handleOffer} disabled={!offerAmount}>
                  Submit Offer
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Viewing Modal */}
      {showViewingModal && (
        <div className="modal show d-block" style={{ backgroundColor: "rgba(0,0,0,0.5)" }}>
          <div className="modal-dialog">
            <div className="modal-content">
              <div className="modal-header">
                <h5 className="modal-title">Schedule Viewing</h5>
                <button type="button" className="btn-close" onClick={() => setShowViewingModal(false)}></button>
              </div>
              <div className="modal-body">
                <div className="mb-3">
                  <label className="form-label">Preferred Date</label>
                  <input
                    type="date"
                    className="form-control"
                    value={viewingDate}
                    onChange={(e) => setViewingDate(e.target.value)}
                    min={new Date().toISOString().split("T")[0]}
                  />
                </div>
                <div className="mb-3">
                  <label className="form-label">Preferred Time</label>
                  <select className="form-select" value={viewingTime} onChange={(e) => setViewingTime(e.target.value)}>
                    <option value="">Select a time</option>
                    <option value="09:00">9:00 AM</option>
                    <option value="10:00">10:00 AM</option>
                    <option value="11:00">11:00 AM</option>
                    <option value="14:00">2:00 PM</option>
                    <option value="15:00">3:00 PM</option>
                    <option value="16:00">4:00 PM</option>
                    <option value="17:00">5:00 PM</option>
                  </select>
                </div>
              </div>
              <div className="modal-footer">
                <button type="button" className="btn btn-secondary" onClick={() => setShowViewingModal(false)}>
                  Cancel
                </button>
                <button
                  type="button"
                  className="btn btn-primary"
                  onClick={handleScheduleViewing}
                  disabled={!viewingDate || !viewingTime}
                >
                  Schedule Viewing
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
